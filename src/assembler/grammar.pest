program = {SOI ~ (WHITE_SPACE | NEWLINE)* ~ ( input ~ input_byte+ )? ~ start_of_program ~ instruction+ ~ EOI}

whitespace_not_eol = _{" " | "\t"}
end_of_line= _{whitespace_not_eol* ~ (NEWLINE+ | EOI) }
hex_prefix = {^"0x"}
bin_prefix = {^"0b"}
trailing_zeroes = _{"0"*}
input = {WHITE_SPACE* ~ ^"input" ~ end_of_line}
input_byte = {WHITE_SPACE* ~ (
    char_input
  | bin_input
  | hex_input
  | dec_input
  ) ~ end_of_line
}
char_input = {"'" ~ ASCII ~ "'"}
hex_input = {hex_prefix ~ trailing_zeroes ~  ASCII_HEX_DIGIT{,2}}
bin_input = {bin_prefix ~ trailing_zeroes ~ ASCII_BIN_DIGIT{,8}}
dec_input = {(trailing_zeroes ~ ('0'..'1')? ~ ASCII_DIGIT{,2})
  | (trailing_zeroes ~ "2" ~ '0'..'4' ~ ASCII_DIGIT)
  | (trailing_zeroes ~ "25" ~ '0'..'5')
}

start_of_program = {WHITE_SPACE* ~ ^"program:" ~ end_of_line}
nop = {WHITE_SPACE* ~ ^"nop" ~ end_of_line}
j = {WHITE_SPACE* ~ ^"j" ~ end_of_line}
jez = {WHITE_SPACE* ~ ^"jez" ~ end_of_line}
jnz = {WHITE_SPACE* ~ ^"jnz" ~ end_of_line}
jgez = {WHITE_SPACE* ~ ^"jgez" ~ end_of_line}
jgz = {WHITE_SPACE* ~ ^"jgz" ~ end_of_line}
jlez = {WHITE_SPACE* ~ ^"jlez" ~ end_of_line}
jlz = {WHITE_SPACE* ~ ^"jlz" ~ end_of_line}
dec_literal = {WHITE_SPACE* ~ ( ( "6" ~ ('0'..'3') ) | ( '1'..'5'? ~ ASCII_DIGIT ) | ASCII_DIGIT ) ~ end_of_line}
bin_literal = {WHITE_SPACE* ~ bin_prefix ~ trailing_zeroes ~ ASCII_BIN_DIGIT{,6} ~ end_of_line }
hex_literal = {WHITE_SPACE* ~ hex_prefix ~ trailing_zeroes ~ '0'..'3'? ~ ASCII_HEX_DIGIT ~ end_of_line}
literal = {dec_literal | bin_literal | hex_literal}
add = {WHITE_SPACE* ~ ^"add" ~ end_of_line}
sub = {WHITE_SPACE* ~ ^"sub" ~ end_of_line}
or = {WHITE_SPACE* ~ ^"or" ~ end_of_line}
nor = {WHITE_SPACE* ~ ^"nor" ~ end_of_line}
xor = {WHITE_SPACE* ~ ^"xor" ~ end_of_line}
xnor = {WHITE_SPACE* ~ ^"xnor" ~ end_of_line}
and = {WHITE_SPACE* ~ ^"and" ~ end_of_line}
nand = {WHITE_SPACE* ~ ^"nand" ~ end_of_line}
from = { input_reg | ( ^"reg"? ~ '0'..'5')}
to = { output_reg | ( ^"reg"? ~ '0'..'5')}
input_reg = {^"input" | ^"in" | ^"i"}
output_reg = {^"output" | ^"out" | ^"o"}

mov = {WHITE_SPACE* ~ ^"mov" ~ WHITE_SPACE* ~ from ~ WHITE_SPACE* ~ to ~ end_of_line}
instruction = {nop | j | jez | jnz | jgez |jgz | jlez | jlz | literal | add | sub | or | nor | xor | xnor | and | nand | mov}

